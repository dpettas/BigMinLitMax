#include <stdint.h>
#include "biset_manip.hpp"


int bitset_msb_position( uint64_t bset)
{
    if(!bset) return -1;

    int msb = 0;
    while (bset) 
    {
        msb++;
        bset = bset >> 1;
    }
    return msb - 1;
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

void bitset_turn_on_bits( uint64_t& bset, int start, int stop, int step)
{
    for(int pos = start; pos <= stop; pos += step)
    {
        uint64_t on_bit = 0x1ul << (pos);
        bset |= on_bit;
    }

    return;
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

void bitset_turn_off_bits( uint64_t& bset, int start, int stop, int step)
{
    for(int pos = start; pos <= stop; pos += step)
    {
        uint64_t on_bit = 0x1ul << (pos);
        bset &= ~on_bit;
    }

    return;
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

void bitset_turn_on_bit( uint64_t& key, int i)
{
    key = key | (0x1ul << i);
    return;
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

void bitset_turn_off_bit( uint64_t& key, int i)
{
    key = key & (~(0x1ul << i));
    return;
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

uint64_t bitset_set_ones(int start)
{
    return (1ul<< (start+1)) - 1ul;
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////